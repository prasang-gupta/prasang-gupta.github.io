<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compute at Edge | Prasang Gupta</title>
    <link>https://prasang-gupta.github.io/tag/compute-at-edge/</link>
      <atom:link href="https://prasang-gupta.github.io/tag/compute-at-edge/index.xml" rel="self" type="application/rss+xml" />
    <description>Compute at Edge</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© 2021 Prasang Gupta</copyright><lastBuildDate>Tue, 01 Jun 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://prasang-gupta.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Compute at Edge</title>
      <link>https://prasang-gupta.github.io/tag/compute-at-edge/</link>
    </image>
    
    <item>
      <title>Distributed Edge Compute</title>
      <link>https://prasang-gupta.github.io/project/distributededge/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://prasang-gupta.github.io/project/distributededge/</guid>
      <description>&lt;p&gt;&lt;span style=&#34;font-style:bold;font-size:120%&#34;&gt;&lt;a class=&#34;mt-1&#34;&gt;AIM&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The aim of this study was to build a system to distribute compute load across different resources present on the edge. It also involved testing the built system with a dummy exercise and find out the robustness of the system and any additional points that might need to be taken care of before actually attempting a client project in this domain.&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-style:bold;font-size:120%&#34;&gt;&lt;a class=&#34;mt-1&#34;&gt;DETAILS&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;














&lt;figure  id=&#34;figure-solution-architecture&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;
        &lt;img alt=&#34;Solution Architecture&#34; srcset=&#34;
               /project/distributededge/architecture_hu9a6a3449283a00e41d8fa0a852df1805_67176_41b426d29e42d56969afa81be83afec6.png 400w,
               /project/distributededge/architecture_hu9a6a3449283a00e41d8fa0a852df1805_67176_3abc4eba1fa3725797fb60596476dc0a.png 760w,
               /project/distributededge/architecture_hu9a6a3449283a00e41d8fa0a852df1805_67176_1200x1200_fit_lanczos_3.png 1200w&#34;
               src=&#34;https://prasang-gupta.github.io/project/distributededge/architecture_hu9a6a3449283a00e41d8fa0a852df1805_67176_41b426d29e42d56969afa81be83afec6.png&#34;
               width=&#34;669&#34;
               height=&#34;406&#34;
               loading=&#34;lazy&#34; data-zoomable class=&#34; img-light&#34; /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Solution Architecture
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;We built out a system for distributed edge compute using microk8s, a micro kubernetes engine. We paired it with metalb, a load balancer and dashboarding, resource tracking and reporting tools like grafana and prometheus. To simulate an edge environment, a local ensemble of devices was created and connected together on the same network. A total of 3 devices were included in the network including a raspbery pi, a windows laptop and an edge compute appliance. For testing out the pipeline, we ran a simple object detection model on all the devices using tensorflow serving.&lt;/p&gt;
&lt;p&gt;While testing, we also came across several limitations of the architecture. The first is that the compute power was very skewed within the networks (x86 devices were orders of magnitude faster than ARM). This lead to bottlenecking at times even with the load balancer. We also realised that running a full object detection model on small devices was not a great idea due to the compute and memory limitations of each device.&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-style:bold;font-size:120%&#34;&gt;&lt;a class=&#34;mt-1&#34;&gt;IMPACT&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The system built was a demonstration that multiple unused devices can be pooled together at the edge to increase the overall compute capabilities, reducing the lag of transferring data to and from the cloud. Apart from reducing latency, it also helps in keeping the data secure as everything is happening locally. This also ensures that no single edge device is overutilised hampering the pipeline.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
